#!/bin/bash

export LC_ALL=C

update() {
    pushd /srv/runner
    if test ! -d scipy; then
        sudo -H -u runner git clone https://github.com/scipy/scipy.git scipy
	sudo -H -u runner git -C scipy submodule init
        ln -s /srv/results scipy/benchmarks/results
    fi
    sudo -H -u runner git -C scipy fetch origin
    sudo -H -u runner git -C scipy checkout master
    sudo -H -u runner git -C scipy branch -f maintenance/0.14.x origin/maintenance/0.14.x
    sudo -H -u runner git -C scipy branch -f maintenance/0.15.x origin/maintenance/0.15.x
    sudo -H -u runner git -C scipy reset --hard origin/master
    sudo -H -u runner git -C scipy submodule update
    popd
}

benchmarks() {
    update
    pushd /srv/runner/scipy/benchmarks
    while true; do echo; done | sudo -H -u runner ATLAS=None OPENBLAS_NUM_THREADS=1 PATH=$PATH:/srv/runner/.local/bin python run.py --current-repo "$@"
    sudo -H -u runner PATH=$PATH:/srv/runner/.local/bin python run.py --current-repo publish
    rm -rf /srv/html/*
    rsync -a html/ /srv/html/
    popd
}

docs() {
    update
    pushd /srv/runner/scipy/doc
    rm -rf ../build ../dist build dist
    if test "$1" != ""; then
	sudo -H -u runner git checkout "$1"
    fi
    sudo -H -u runner git clean -fdx . ../scipy
    sudo -H -u runner ATLAS=None OPENBLAS_NUM_THREADS=1 PATH=/usr/lib/ccache:$PATH:/srv/runner/.local/bin make dist
    rsync -a --delete build/dist/ /srv/doc/
    popd
}

# Enable strict error handling and reporting
set -e -u
set -E -o errtrace
function backtrace () {
    local deptn=${#FUNCNAME[@]}
    for ((i=1; i<$deptn; i++)); do
        local func="${FUNCNAME[$i]}"
        local line="${BASH_LINENO[$((i-1))]}"
        local src="${BASH_SOURCE[$((i-1))]}"
        printf '%*s' $i '' # indent
        echo "at: $func(), $src, line $line"
    done
}
trap 'backtrace' ERR

# Run command:
if test "$1" = "benchmarks"; then
    shift
    benchmarks "$@"
elif test "$1" = "docs"; then
    shift
    docs "$@"
else
    echo "error: invalid command: $1"
    exit 1
fi
